cmake_minimum_required(VERSION 3.1)

project(mcpelauncher-ui-qt LANGUAGES CXX)

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
# protobuf now requires c++14
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)

find_package(Qt5 COMPONENTS Core Quick Concurrent Svg REQUIRED)

option(ENABLE_UPDATE_CHECK "Enables update checking with a remote server")
set(UPDATE_CHECK_URL "" CACHE STRING "Specify the URL for the server to check for updates on")
set(UPDATE_CHECK_BUILD_ID "" CACHE STRING "Specify the numeral version number for the current build")
set(LAUNCHER_VERSIONDB_URL "" CACHE STRING "Specify the remote url of the versiondb to use")
set(LAUNCHER_VERSIONDB_PATH "" CACHE STRING "Specify a local versiondb checkout to embed into this binary")
set(LAUNCHER_CHANGE_LOG "" CACHE STRING "Specify the changelog to show after update")
set(LAUNCHER_VERSION_NAME "" CACHE STRING "Specify the version name shown in settings")
set(LAUNCHER_VERSION_CODE "" CACHE STRING "Specify the version code (integer) shown in settings")
option(LAUNCHER_DISABLE_DEV_MODE "Disables the dev tab by default")
option(LAUNCHER_ENABLE_GOOGLE_PLAY_LICENCE_CHECK "Enables checking license of the Game" ON)
option(LAUNCHER_MACOS_HAVE_ARMLAUNCHER "Enables use of the arm launcher")
option(LAUNCHER_ENABLE_GLFW "Enables glfw integration" ON)

find_package(Qt5LinguistTools)
set(LAUNCHER_LINGUIST_RESOURCES "")
if (Qt5LinguistTools_FOUND)
    qt5_create_translation(QM_FILES ${CMAKE_CURRENT_SOURCE_DIR} mcpelauncher_en.ts mcpelauncher_de.ts mcpelauncher_fr.ts)
    configure_file(translations.qrc ${CMAKE_CURRENT_BINARY_DIR} COPYONLY)
    set(LAUNCHER_LINGUIST_RESOURCES ${CMAKE_CURRENT_BINARY_DIR}/translations.qrc ${QM_FILES})
endif()

find_package(Qt5QuickCompiler)
if (Qt5QuickCompiler_FOUND)
    qtquick_compiler_add_resources(RESOURCES qml.qrc)
    set(RESOURCES ${RESOURCES} ${LAUNCHER_LINGUIST_RESOURCES})
else ()
    set(RESOURCES qml.qrc ${RESOURCES} ${LAUNCHER_LINGUIST_RESOURCES})
endif ()

if (NOT "${LAUNCHER_VERSIONDB_PATH}" STREQUAL "")
    configure_file(archivalversionlist.qrc ${CMAKE_CURRENT_BINARY_DIR} COPYONLY)
    configure_file("${LAUNCHER_VERSIONDB_PATH}/versions.armeabi-v7a.json.min" ${CMAKE_CURRENT_BINARY_DIR} COPYONLY)
    configure_file("${LAUNCHER_VERSIONDB_PATH}/versions.x86.json.min" ${CMAKE_CURRENT_BINARY_DIR} COPYONLY)
    configure_file("${LAUNCHER_VERSIONDB_PATH}/versions.arm64-v8a.json.min" ${CMAKE_CURRENT_BINARY_DIR} COPYONLY)
    configure_file("${LAUNCHER_VERSIONDB_PATH}/versions.x86_64.json.min" ${CMAKE_CURRENT_BINARY_DIR} COPYONLY)
    set(RESOURCES ${CMAKE_CURRENT_BINARY_DIR}/archivalversionlist.qrc ${RESOURCES})
endif()

add_executable(${PROJECT_NAME} main.cpp launcherapp.cpp launcherapp.h googleloginhelper.cpp googleloginhelper.h googleaccount.h versionmanager.cpp versionmanager.h apkextractiontask.cpp apkextractiontask.h googleplayapi.cpp googleplayapi.h googleversionchannel.cpp googleversionchannel.h googleapkdownloadtask.cpp googleapkdownloadtask.h gamelauncher.cpp gamelauncher.h profilemanager.cpp profilemanager.h qmlurlutils.h archivalversionlist.cpp archivalversionlist.h launchersettings.h troubleshooter.cpp troubleshooter.h updatechecker.cpp updatechecker.h supportedandroidabis.cpp supportedandroidabis.h cpuid.cpp cpuid.h ${RESOURCES})
if (ENABLE_UPDATE_CHECK)
    target_compile_definitions(${PROJECT_NAME} PUBLIC UPDATE_CHECK UPDATE_CHECK_BUILD_ID=${UPDATE_CHECK_BUILD_ID} UPDATE_CHECK_URL="${UPDATE_CHECK_URL}")
endif()
if (NOT "${LAUNCHER_VERSIONDB_URL}" STREQUAL "")
    target_compile_definitions(${PROJECT_NAME} PUBLIC LAUNCHER_VERSIONDB_URL="${LAUNCHER_VERSIONDB_URL}")
endif()
if (NOT "${LAUNCHER_CHANGE_LOG}" STREQUAL "")
    target_compile_definitions(${PROJECT_NAME} PUBLIC LAUNCHER_CHANGE_LOG="${LAUNCHER_CHANGE_LOG}")
endif()
if (NOT "${LAUNCHER_VERSION_CODE}" STREQUAL "")
    target_compile_definitions(${PROJECT_NAME} PUBLIC LAUNCHER_VERSION_CODE="${LAUNCHER_VERSION_CODE}")
endif()
if (NOT "${LAUNCHER_VERSION_NAME}" STREQUAL "")
    target_compile_definitions(${PROJECT_NAME} PUBLIC LAUNCHER_VERSION_NAME="${LAUNCHER_VERSION_NAME}")
endif()
if(LAUNCHER_DISABLE_DEV_MODE)
    target_compile_definitions(${PROJECT_NAME} PUBLIC LAUNCHER_DISABLE_DEV_MODE)
endif()
if(LAUNCHER_ENABLE_GOOGLE_PLAY_LICENCE_CHECK)
    target_compile_definitions(${PROJECT_NAME} PUBLIC LAUNCHER_ENABLE_GOOGLE_PLAY_LICENCE_CHECK)
endif()
if(LAUNCHER_MACOS_HAVE_ARMLAUNCHER)
    target_compile_definitions(${PROJECT_NAME} PUBLIC LAUNCHER_MACOS_HAVE_ARMLAUNCHER)
endif()
if(LAUNCHER_ENABLE_GLFW)
    include(ext/glfw.cmake)
    target_compile_definitions(${PROJECT_NAME} PUBLIC LAUNCHER_ENABLE_GLFW)
    target_link_libraries(${PROJECT_NAME} glfw)
endif()

if (APPLE)
    target_sources(${PROJECT_NAME} PUBLIC launcherapp_osx.mm supportedandroidabis.mm)
    target_link_libraries(${PROJECT_NAME} "-framework AppKit")
    if(ENABLE_SPARKLE_UPDATE_CHECK)
        target_sources(${PROJECT_NAME} PUBLIC sparkle_updatechecker.mm)
        target_compile_definitions(${PROJECT_NAME} PUBLIC SPARKLE_UPDATE_CHECK=1 SPARKLE_UPDATE_CHECK_URL="${SPARKLE_UPDATE_CHECK_URL}")
        target_link_libraries(${PROJECT_NAME} "-framework Sparkle")
    endif()
endif()

target_link_libraries(${PROJECT_NAME} Qt5::Core Qt5::Quick Qt5::Svg Qt5::Concurrent playdl-signin-ui-qt-lib mcpelauncher-extract-lib mcpelauncher-common mcpelauncher-apkinfo file-util gplayapi)

if (ENABLE_APPIMAGE_UPDATE_CHECK)
    target_compile_definitions(${PROJECT_NAME} PUBLIC APPIMAGE_UPDATE_CHECK=1)
    target_link_libraries(${PROJECT_NAME} z libappimageupdate)
endif()

install(TARGETS mcpelauncher-ui-qt RUNTIME COMPONENT mcpelauncher-ui-qt DESTINATION bin)
if (NOT APPLE)
    install(FILES mcpelauncher-ui-qt.desktop COMPONENT mcpelauncher-ui-qt DESTINATION share/applications)
    install(FILES Resources/mcpelauncher-icon.svg RENAME mcpelauncher-ui-qt.svg
            COMPONENT mcpelauncher-ui-qt DESTINATION share/pixmaps)
endif()
include(CPackSettings.cmake)
